cea$case[as_ids(V(G))[V(G)$type]]
teststrata %>% filter(strata == as_ids(V(G))[V(G)$type])
teststrata %>% filter(strata == as_ids(V(G))[V(G)$type]) %>% NROW
cea$case[unique(teststrata$strata)]
teststrata %>% NROW %>% `/`(804)
NROW(cea)
teststrata %>% filter(strata %in% as_ids(V(G))[V(G)$type], idx %in% H$matching[V(G)$type])
teststrata %>% filter(strata == as_ids(V(G))[V(G)$type], idx == H$matching[V(G)$type])
teststrata %>% filter(strata == as_ids(V(G))[V(G)$type][1], idx == H$matching[V(G)$type][1])
teststrata %>% filter(strata == as_ids(V(G))[V(G)$type][2], idx == H$matching[V(G)$type][2])
teststrata %>% filter(strata == as_ids(V(G))[V(G)$type] & idx == H$matching[V(G)$type])
teststrata[teststrta$strata == as_ids(V(G))[V(G)$type] & teststrata$idx == H$matching[V(G)$type])
teststrata[teststrta$strata == as_ids(V(G))[V(G)$type] & teststrata$idx == H$matching[V(G)$type][
teststrata[teststrta$strata == as_ids(V(G))[V(G)$type] & teststrata$idx == H$matching[V(G)$type]]
]
[[]]]
teststrata[teststrta$strata == as_ids(V(G))[V(G)$type] & teststrata$idx == H$matching[V(G)$type]]
teststrata[teststrata$strata == as_ids(V(G))[V(G)$type] & teststrata$idx == H$matching[V(G)$type]]
teststrata$strata == as_ids(V(G))[V(G)$type] & teststrata$idx == H$matching[V(G)$type]
teststrata$strata == as_ids(V(G))[V(G)$type] & teststrata$idx == H$matching[V(G)$type] %>% sum
sum(teststrata$strata == as_ids(V(G))[V(G)$type] & teststrata$idx == H$matching[V(G)$type])
H$matching
H$matching[V(G)$type]
H$matching[V(G)$type] %>% length
cea$case[242]
cea$case[H$matching[V(G)$type]]
H$matching[V(G)$type]
teststrata$idx == H$matching[V(G)$type]
teststrata$idx == H$matching[V(G)$type] %>% NROW
NROW(teststrata$idx == H$matching[V(G)$type])
teststrata$strata == as_ids(V(G))[V(G)$type] && teststrata$idx == H$matching[V(G)$type]
teststrata$strata == as_ids(V(G))[V(G)$type] & teststrata$idx == H$matching[V(G)$type]
length(teststrata$strata == as_ids(V(G))[V(G)$type] & teststrata$idx == H$matching[V(G)$type])
sum(teststrata$strata == as_ids(V(G))[V(G)$type] & teststrata$idx == H$matching[V(G)$type])
mapply(function(x, y) teststrata[teststrata$strata == x & teststrata$idx == y], as_ids(V(G))[V(G)$type], H$matching[V(G)$type])
mapply(function(x, y) teststrata %>% filter(strata == x, idx == y), as_ids(V(G))[V(G)$type], H$matching[V(G)$type])
mapply(function(x, y) teststrata %>% filter(strata == x, idx == y), as_ids(V(G))[V(G)$type], H$matching[V(G)$type]) %>% do.call(rbind, .)
mapply(function(x, y) teststrata %>% filter(strata == x, idx == y), as_ids(V(G))[V(G)$type], H$matching[V(G)$type]) %>% { do.call(rbind, .) }
mapply(function(x, y) teststrata %>% filter(strata == x, idx == y), as_ids(V(G))[V(G)$type], H$matching[V(G)$type]) %>% { do.call(rbind, .) }
mapply(function(x, y) teststrata %>% filter(strata == x, idx == y), as_ids(V(G))[V(G)$type], H$matching[V(G)$type]) %>% { do.call(rbind, as.list(.)) }
mapply(function(x, y) teststrata %>% filter(strata == x, idx == y), as_ids(V(G))[V(G)$type], H$matching[V(G)$type]) -> grr
head(grr)
apply(grr, 2, identity)
apply(grr, 2, identity) %>% rbind
apply(grr, 2, identity) %>% { do.call(rbind, .) }
apply(grr, 2, identity) %>% { do.call(rbind, .) } %>% as.data.frame
apply(grr, 2, identity) %>% { do.call(rbind, .) } %>% as.data.frame
mapply(function(x, y) teststrata %>% filter(strata == x, idx == y), as_ids(V(G))[V(G)$type], H$matching[V(G)$type]) %>%
apply(2, identity) %>% { do.call(rbind, .) } %>% as.data.frame %>% mutate(closest = 1) -> grr
grr$strata
lapply(grr, class)
testdata %>% summary
testdata$strata %>% unique %>% length
testdata$strata %>% length
predict(m, newdata = data.frame(dist = 0.01))
coef(m)
?predict.clogit
?predict.cph
class(m
)
?predict.coxph
predict(m, newdata = data.frame(dist = 0.01, strata = 1), type = "risk")
predict(m, newdata = data.frame(dist = 0.01, strata = 6), type = "risk")
predict(m, newdata = data.frame(dist = 0.01, strata = 5), type = "risk")
predict(m, newdata = data.frame(dist = 0.01, strata = 7), type = "risk")
predict(m, newdata = data.frame(dist = 0.01), type = "risk")
coef(m)
m
summary(m)
coef(m)
by(testdata$dist, testdata$closest, summary)
predict(m, newdata = expand.grid(dist = 0.01, strata = testdata$strata), type = "risk")
predict(m, newdata = expand.grid(dist = x, strata = testdata$strata), type = "risk")
predict(m, newdata = expand.grid(dist = x, strata = testdata$strata), type = "risk")
nd %>% group_by(dist) %>% summarize(mean(prob))
nd %>% group_by(dist) %>% summarize(mean(prob)) %>% plot
with(testdata %>% filter(closest == 1), density(dist))
with(testdata %>% filter(closest == 1), density(dist)) %>% plot
with(testdata %>% filter(closest == 0), density(dist)) %>% lines
with(testdata %>% filter(closest == 1), density(dist)) %>% plot
with(testdata %>% filter(closest == 0), density(dist)) %>% lines
binary(0.2)
paste(rev(as.integer(intToBits(12))), collapse="")
paste(rev(as.integer(intToBits(0.2))), collapse="")
0.4 - 0.333
equal(0.2 - 0.3, -0.1
)
allequal(0.2 - 0.3, -0.1)
all.equal(0.2 - 0.3, -0.1)
?all.equal
q()
n
ms22[[1]] %>% head
head(cea_grp)
ms_age[[1]]
dfs2[[1]]
left_join(dfs2[[1]], cea_grp) %>% head
left_join(dfs2[[1]], cea_grp) %>% filter(Age_Years < 5)
ms_age[[1]]
left_join(dfs2[[1]], cea_grp) %>% filter(Age_Years < 5) %>% head
left_join(dfs2[[1]], cea_grp) %>% filter(Age_Years < 5) %>% with(test.it(case, exp, strata))
left_join(dfs2[[1]], cea_grp) %>% filter(Age_Years < 5) %>% unique_controls
left_join(dfs2[[1]], cea_grp) %>% filter(Age_Years < 5) %>% unique_controls %>% with(test.it(case, exp, strata))
left_join(dfs2[[1]], cea_grp) %>% filter(Age_Years < 5) %>% fix_df %>% with(test.it(case, exp, strata))
ms_age[[1:2]]
ms_age[1:2]
temp[[1]]
temp
temp %>% mutate(or = as.numeric(or))
names(dfs2[[1]])
dfs2[[1]]$case
q()
n
?devtools::setup
devtools::setup()
devtools::use_package(c("dplyr", "tidyr", "igraph", "ggplot2"))
sapply(c("dplyr", "tidyr", "igraph", "ggplot2"), devtools::use_package)
getwd()
devtools::use_package("cluster")
getwd()
?enquo
?dplyr::enquo
?rlang::enquo
install.packages("rlang")
devtools::use_package("rlang")
devtools::build()
ls
devtools::build()
devtools::build()
devtools::build()
?devtools::build
q()
n
devtools::build()
system("env")
install.packages("unixtools")
q()
n
get_threshold(cea, other_vars)
traceback()
detach("package:casecontrol")
library(casecontrol)
q()
n
q()
n
q()
n
q()
n
debugonce(get_threshold)
n
other_vars2
other_vars2 %>% head
n
n
n
n
q()
n
threshold_results$threshold
threshold_results$m
names(threshold_results)
threshold_model_plot(threshold_results)
original_compare_plot(cea, case, set, threshold_results)
threshold_model_plot(threshold_results)
original_compare_plot(cea, case, set, threshold_results)
debugonce(original_compare_plot)
original_compare_plot(cea, case, set, threshold_results)
n
casevar
!!casevar
data %>% select(!!casevar)
data %>% select(UQ(casevar))
data %>% select(rlang::UQ(casevar))
Q
install.packages("dplyr")
q()
n
casevar <- quo(case)
substitute(tapply(idx, casevar, identity))
formula(substitute(tapply(idx, casevar, identity)))
eval(substitute(tapply(idx, casevar, identity)))
?substitute
original_compare_plot(cea, case, set, threshold_results)
debugonce(original_compare_plot)
original_compare_plot(cea, case, set, threshold_results)
n
data %>% select(!!casevar, !!stratavar) %>% mutate(idx = 1:NROW(.)) -> temp
head(temp)
with(temp, substitute(tapply(idx, stratavar, identity)))
with(temp, substitute(tapply(idx, UQ(stratavar), identity)))
eval(with(temp, substitute(tapply(idx, UQ(stratavar), identity))))
eval(with(temp, substitute(tapply(idx, stratavar, identity))))
stratavar
stratavar <- name(set)
stratavar <- as.name(set)
stratavar <- as.name("set")
eval(with(temp, substitute(tapply(idx, stratavar, identity))))
with(temp, substitute(tapply(idx, stratavar, identity)))
stratavar
with(temp, substitute(tapply(idx, stratavar, identity)))
substitute(stratavar)
substitute(tapply(idx, stratavar))
?substitute
?substitute
temp
?append
original_compare_plot(cea, case, set, threshold_results)
original_compare_plot(cea, case, set, threshold_results)
debugonce(orginal_compare_plot)
debugonce(orginal_compare_plot)
debugonce(original_compare_plot)
original_compare_plot(cea, case, set, threshold_results)
n
data %>% select(!!casevar, !!stratavar) %>% mutate(idx = 1:NROW(.)) -> temp
temp %>% { substitute(tapply(.$idx, stratavar, .$identity)) }
stratavar
temp %>% { substitute(tapply(.$idx, !!stratavar, .$identity)) }
temp %>% { substitute(tapply(.$idx, UQ(stratavar), .$identity)) }
s <- as.name("set")
temp %>% { substitute(tapply(.$idx, s, .$identity)) }
temp %>% { tapply(.$idx, substitute(s), .$identity) }
temp %>% { tapply(.$idx, eval(substitute(s)), .$identity) }
temp %>% { tapply(.$idx, .[, stratavar], .$identity) }
temp %>% { tapply(.$idx, .[, !!stratavar], .$identity) }
temp %>% { tapply(.$idx, .[, UQ(stratavar)], .$identity) }
temp %>% { tapply(.$idx, .[, rlang::UQ(stratavar)], .$identity) }
temp %>% { tapply(.$idx, .[, s], .$identity) }
temp %>% { tapply(.$idx, .[, s], .$identity) }
stratavar
stratavar %>% as.character()
stratavar %>% as.character()[2
]
temp %>% { tapply(.$idx, .[, as.character(stratavar)[2]], .$identity) }
temp
Q
{ tapply(.$idx, .[, as.character(stratavar)[2]], .$identity) } %>%
original_compare_plot(cea, case, set, threshold_results)
debugonce(original_compare_plot)
original_compare_plot(cea, case, set, threshold_results)
n
data %>% select(!!casevar, !!stratavar) %>%
mutate(idx = 1:NROW(.)) -> temp
data %>% select(!!casevar, !!stratavar) %>%
mutate(idx = 1:NROW(.)) -> temp
names(data)
data %>% select(!!casevar, !!stratavar)
n
data %>% select(!!casevar, !!stratavar)
data %>% select(!!casevar, !!stratavar) %>%
mutate(idx = 1:NROW(.)) -> temp
temp[, as.character(stratavar)[2]]
tas.character(stratavar)[2]
as.character(stratavar)[2]
as.character(stratavar)
stratavar
casevar
Q
debugonce(original_compare_plot)
original_compare_plot(cea, case, set, threshold_results)
n
stratavar
!!stratavar
data %>% select(!!casevar, !!stratavar) -> x
stratavar
.[, as.character(stratavar)[2]]
x[, as.character(stratavar)[2]]
data %>% select(!!casevar, !!stratavar) %>%
mutate(idx = 1:NROW(.)) %>%
{ tapply(.$idx, .[, as.character(stratavar)[2]], .$identity) }
data %>% select(!!casevar, !!stratavar) %>%
mutate(idx = 1:NROW(.)) %>%
{ tapply(.$idx, .[, as.character(stratavar)[2]], .$identity) }
data %>% select(!!casevar, !!stratavar) %>%
mutate(idx = 1:NROW(.)) %>%
{ tapply(.$idx, .[[, as.character(stratavar)[2]]], .$identity) }
data %>% select(!!casevar, !!stratavar) %>%
mutate(idx = 1:NROW(.)) %>%
{ tapply(.$idx, .[, as.character(stratavar)[2]], .$identity) }
data %>% select(!!casevar, !!stratavar) %>%
mutate(idx = 1:NROW(.)) %>%
{ tapply(.$idx, .[, as.character(stratavar)[2]], identity) }
Q
original_compare_plot(cea, case, set, threshold_results)
debugonce(original_compare_plot)
original_compare_plot(cea, case, set, threshold_results)
n
data %>% select(!!casevar, !!stratavar) %>%
mutate(idx = 1:NROW(.)) %>%
{ tapply(.$idx, .[, as.character(stratavar)[2]], identity) }
threshold_results$strata
head(threshold_results$strata)
NROW(threshold_results$strata)
data %>% select(!!casevar, !!stratavar) %>%
mutate(idx = 1:NROW(.)) %>%
{ tapply(.$idx, .[, as.character(stratavar)[2]], identity) }
n
n
n
n
q()
n
ls()
traceback()
devtools::reload(casecontrol)
devtools::reload("casecontrol")
?reload
devtools::reload("casecontrol")
pwd()
getwd()
search()
devtools::reload()
devtools::reload()
devtools::reload()
debugonce(make_analysis_set)
n
message(var)
stratified_data %>% mutate(exp = data[[var]][idx])
data[[var]]
var
names(data)
data
data
names(data)
cea
data
Q
?mapply
cacheit("cc_anasets", dfs2)
reload()
devtools::reload()
reload()
devtools::reload()
fn <- tempfile("calcwarn")
f <- file(fn, "w")
close(f)
issues <- read.delim2(fn, header = FALSE)
cat("a\nb\n", file = fn)
?cat
fn
readLines(fn)
readLines(fn)
cat("a\tb\n", file = fn)
devtools::reload()
head(ms22)
devtools::reload()
devtools::reload()
write_strata_or_output(ms22, "output_knn_nonO157_mhor_all.csv")
names(ms22)
head(ms22)
devtools::reload()
write_strata_or_output(ms22, cc_vars, "output_knn_nonO157_mhor_all.csv")
dplyr::reload()
devtools::reload()
dplyr::reload()
devtools::reload()
head(temp)
ls()
cea %>% filter()
cea %>% filter(TRUE)
cea %>% merge(data.frame())
left_join(cea, data.frame)
left_join(cea, data.frame())
left_join(cea, data.frame(id = NULL))
left_join(cea, data.frame(case = NULL))
names(cea)
left_join(cea, data.frame(set = NULL))
left_join(cea, NULL)
devtools::reload()
calc_strata_or(dfs2[1:3])
calc_strata_or(dfs2[1:3], filterdata = cc_grp)
calc_strata_or(dfs2[1:3], filter = Age_Years < 5, filterdata = cc_grp)
devtools::reload()
calc_strata_or(dfs2[1:3], filter = Age_Years < 5, filterdata = cc_grp)
calc_strata_or(dfs2[1:3], filterdata = cc_grp)
calc_strata_or(dfs2[1:3], filterdata = cc_grp)
devtools::reload
devtools::reload()
calc_strata_or(dfs2[1:3], filterdata = cc_grp)
cea %>% filter(quo(TRUE))
cea %>% filter(!!quo(TRUE))
devtools::reload()
calc_strata_or(dfs2[1:3], filterdata = cc_grp)
calc_strata_or(dfs2[1:3], filter = Age_Years < 5, filterdata = cc_grp)
ms_age
devtools::reload()
devtools::reload()
devtools::reload()
ggplot() %>% print
ggplot() %>% plot
devtools::reload()
devtools::reload()
devtools::reload()
devtools::reload()
devtools::reload()
?suppressWarnings
q()
n
q()
n
head(names(cc))
names(cc_vars)
head(cc_vars)
debug(age_set)
debug(cc_subset)
n
n
filter
Q
names(cc) %>% head
cc$State %>% summary
debug(cc_subset)
n
filter
n
stem
substitute(calc_strata_or(dfs2, filter = filter, filterdata = cc_grp)))
substitute(calc_strata_or(dfs2, filter = filter, filterdata = cc_grp))
Q
Q
Q
names(cc_grp)
names(cc_grp)
traceback()
debugonce(cc_subset)
n
n
?
a
s
n
Q 
debugonce(write_strata_or_output)
n
n
debugonce(write_strata_or_output)
n
head(d)
head(results)
lapply(results, function(d) d %>% unclass %>% unlist %>% data.frame(names(.), .)) %>%
{ tibble(var = varnames, ncol = sapply(., NCOL), data = .) } %>%
filter(ncol == 2) %>% rowwise %>%
do(data.frame(var = .$var, spread(.$data %>% setNames(c("var", "val")), var, val))) %>%
mutate(or = as.numeric(estimate.common.odds.ratio))
lapply(results, function(d) d %>% unclass %>% unlist %>% data.frame(names(.), .)) %>%
{ tibble(var = varnames, ncol = sapply(., NCOL), data = .) } %>%
filter(ncol == 2) %>% rowwise %>%
do(data.frame(var = .$var, spread(.$data %>% setNames(c("var", "val")), var, val))) %>%
mutate(or = as.numeric(estimate.common.odds.ratio)) -> temp
temp$estimate.odds.ratio
temp %>%
mutate(or = ifelse(is.na(or), ifelse(!is.null(estimate.odds.ratio), as.numeric(estimate.odds.ratio), NA), or),
p.value = as.numeric(p.value))
temp %>%
mutate(or = ifelse(is.na(or), ifelse(!is.null(estimate.odds.ratio), as.numeric(estimate.odds.ratio), NA), or),
p.value = as.numeric(p.value))
temp %>% mutate(or = as.numeric(estimate.odds.ratio))
temp %>% mutate(or = as.numeric(ifelse(!is.null(estimate.odds.ration), estimate.odds.ratio), NA))
temp %>% mutate(or = as.numeric(ifelse(!is.null(estimate.odds.ratio), estimate.odds.ratio), NA))
temp %>%     { if(is.null(.$estimate.odds.ratio)) { mutate(., estimate.odds.ratio = or) } else { . } } %>%
mutate(or = ifelse(is.na(or), as.numeric(estimate.odds.ratio), or),
p.value = as.numeric(p.value))
Q
devtools::reload()
a <- 2
bquote(a == a)
quote(a == a
)
bquote(a == .(a))
substitute(a == A, list(A = a))
substitute(a == A, list(A = b, b = 2))
q()
n
help.search("knn")
library(casecontrol)
devtools::install_local("casecontrol")
devtools::install_local("../casecontrol")
install.packages("../casecontrol", repos=NULL)
install.packages("../casecontrol", repos=NULL, dependencies = TRUE)
install.packages(c("dplyr", "tidyr", "igraph"))
install.packages("../casecontrol", repos=NULL, dependencies = TRUE)
install.packages("igraph")
devtools::install_github("igraph/rigraph")
install.packages("../casecontrol", repos=NULL, dependencies = TRUE)
install.packages("../casecontrol", repos=NULL, dependencies = TRUE)
devtools::install_local("../casecontrol")
detach("package:casecontrol")
devtools::install_local("../casecontrol")
install.packages("../casecontrol", repos = NULL)
library(casecontrol)
casecontrol:::write_strata_or_output()
casecontrol:::write_strata_or_output
q()
n
library(casecontrol)
library(devtools)
devtools::build()
q()
n
